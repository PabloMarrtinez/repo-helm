# should argo-cd applications be created?
argoApplications: true
source: https://github.com/FIWARE-Ops/data-space-connector
release: demo
destination_namespace: &destination dsc-demo
purpose: &purpose dsc-env
branch: &branch main
secretsEnabled: &secretsEnabled false
host: &host
tlsSecret: &tlsSecret
participant: my-provider

applications:

  - name: mysql
    enabled: true
    source_path: applications/mysql
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: wallet
    enabled: true
    source_path: applications/wallet
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: pep-pdp
    enabled: true
    source_path: applications/pep-pdp
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: mongodb
    enabled: true
    source_path: applications/mongodb
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: postgres
    enabled: true
    source_path: applications/postgres
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: orion
    enabled: true
    source_path: applications/orion-ld
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: credentials-config-service
    enabled: true
    source_path: applications/credentials-config-service
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: trusted-issuers-list
    enabled: true
    source_path: applications/trusted-issuers-list
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: vcwaltid
    enabled: true
    source_path: applications/vcwaltid
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: verifier
    enabled: true
    source_path: applications/verifier
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: keycloak
    enabled: true
    source_path: applications/keycloak
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: keyrock
    enabled: true
    source_path: applications/keyrock
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: dsba-pdp
    enabled: true
    source_path: applications/dsba-pdp
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: kong
    enabled: true
    source_path: applications/kong
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: activation-service
    enabled: true
    source_path: applications/activation-service
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: tm-forum-api
    enabled: true
    source_path: applications/tm-forum-api
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml

  - name: contract-management
    enabled: true
    source_path: applications/contract-management
    source_ref: *branch
    destination: *destination
    helm_values:
      - values.yaml
 
 
#Sub-Chart configuration configuration
 
activation-service:
  # Enable the deployment of application: activation-service
  deploymentEnabled: true
 
  activation-service:
    deployment:
      image:
        repository: quay.io/i4trust/activation-service
        tag: 2.2.1
        pullPolicy: IfNotPresent
  
    ## Configuration of activation service execution
    activationService:
      # -- Listen port
      port: 8080
      # -- Number of (gunicorn) workers that should be created
      workers: 1
      # -- Maximum header size in bytes
      maxHeaderSize: 32768
      # -- Log Level
      logLevel: "debug"
  
    ## CCS config
    ccs:
      endpoint: "http://ccs-credentials-config-service:8080/"
      id: "my-activation-service"
      defaultOidcScope: "default"
      oidcScopes:
        default:
          - type: "VerifiableCredential"
            trustedParticipantsLists: [
              "https://tir.dataspace.com"
            ]
            trustedIssuersLists: [
              "http://til-trusted-issuers-list:8080"
            ]
          - type: "ActivationService"
            trustedParticipantsLists: [
              "https://tir.dataspace.com"
            ]
            trustedIssuersLists: [
              "http://til-trusted-issuers-list:8080"
            ]
  
    ## AS config
    config:
  
      # DB
      db:
        # -- Use sqlite in-memory database
        useMemory: true
        # -- Enable tracking of modifications
        modTracking: false
        # -- Enable SQL logging to stderr
        echo: true
  
      # Configuration for additional API keys to protect certain endpoints
      apikeys:
        # Config for iSHARE flow
        ishare:
          # Enable for /token endpoint (API key will be required)
          enabledToken: false
          # Enable for /createpolicy endpoint (API key will be required)
          enabledCreatePolicy: false
        # Config for Trusted-Issuers-List flow
        issuer:
          # Header name
          headerName: "AS-API-KEY"
          # API key (auto-generated if left empty)
          apiKey: ""
          # Enable for /issuer endpoint (API key will be required)
          enabledIssuer: true
        
      ar:
        # Endpoint for token request
        token: "https://ar.isharetest.net/connect/token"
        # Endpoint for create policy requests
        policy: "https://ar.isharetest.net/policy"
        # Endpoint for delegation requests
        delegation: "https://ar.isharetest.net/delegation"
        # EORI of AR
        id: "EU.EORI.DEPROVIDER"
  
      issuer:
        clientId: "my-activation-service"
        providerId: "did:web:my-did:did"
        tilUri: "http://til-trusted-issuers-list:8080"
        verifierUri: "https://verifier.provider.com"
        samedevicePath: "/api/v1/samedevice"
        jwksPath: "/.well-known/jwks"
        algorithms:
          - "ES256"
        roles:
          createRole: "CREATE_ISSUER"
          updateRole: "UPDATE_ISSUER"
          deleteRole: "DELETE_ISSUER"
 
contract-management:
  # Enable the deployment of application: contract-management
  deploymentEnabled: true
 
  contract-management:
    deployment:
      image:
        repository: quay.io/fiware/contract-management
        # -- tag of the image to be used
        tag: 1.0.0
        pullPolicy: IfNotPresent
    ## Config parameters to be used when adding issuers to TIL
    til: {}
      ## Type of Verifiable Credential necessary for accessing the service
      ##credentialType: MyCredential
      ## Claims with permissions granted to given Verifiable Credential
      ##claims:
        ## DID of the target service that is requiring the permissions
      ##  - target: "did:some:service"
      ##    ## Roles that are added/allowed for the given service
      ##    roles:
      ##      - Consumer
      ##      - Admin
    services:
      ## Config for Trusted Issuers List
      til:
        ## Path to be used
        path: ""
        ## URL of the Trusted Issuers List Service
        url: http://${til-service}:8080
        ## Read timeout in sec
        read-timeout: 30
      ## Config for the TM Forum Service hosting the Product Ordering API
      product:
        ## Path to be used
        path: "/tmf-api/productOrderingManagement/v4"
        ## URL of the TM Forum Service hosting the Product Ordering API
        url: http://${tm_forum_proxy}:8080
        ## Read timeout in sec
        read-timeout: 30
      ## Config for the TM Forum Service hosting the Party API
      party:
        ## Path to be used
        path: "/tmf-api/party/v4"
        ## URL of the TM Forum Service hosting the Party API
        url: http://${tm_forum_proxy}:8080
        ## Read timeout in sec
        read-timeout: 30 
      
 
credentials-config-service:
  # Enable the deployment of application: credentials-config-service
  deploymentEnabled: true
 
  credentials-config-service:
  
    # Image
    deployment:
      image: 
        repository: quay.io/fiware/credentials-config-service
        tag: 1.0.1
  
    # Database config
    database:
      persistence: true
      host: mysql-dsc
      name: ccs
      
      # Should use Secret in production environment
      username: root
      password: "<mysql-password>"
 
dsba-pdp:
  # Enable the deployment of application: dsba-pdp
  deploymentEnabled: true
 
  dsba-pdp:
  
    # DB
    db: 
      enabled: false
      migrate:
        enabled: false
  
    deployment:
      # Image
      image:  
        pullPolicy: Always
        repository: quay.io/fiware/dsba-pdp 
        # includes the http policy support
        tag: 1.2.0
  
      # Log level
      logLevel: TRACE
  
      # iSHARE config
      ishare:
        existingSecret: vcwaltid-tls-sec
  
        clientId: did:web:my-did:did
        trustedFingerprints:
          - MYFINGERPRINT
  
        ar:
          id: "did:web:my-did:did"
          delegationPath: "/ar/delegation"
          tokenPath: "/oauth2/token"
          url: "https://ar.provider.com"
  
        trustAnchor:
          id: "EU.EORI.FIWARESATELLITE"
          tokenPath: "/token"
          trustedListPath: "/trusted_list"
          url: "https://tir.dataspace.com"
  
      # Verifier
      trustedVerifiers:
        - https://verifier.provider.com/.well-known/jwks
  
      # Provider DID
      providerId: "did:web:my-did:did"
  
    # ENVs
    additionalEnvVars:
      - name: ISHARE_CERTIFICATE_PATH
        value: /iShare/tls.crt
      - name: ISHARE_KEY_PATH
        value: /iShare/tls.key
 
keycloak:
  # Enable the deployment of application: keycloak
  deploymentEnabled: true
 
  keycloak:
  
    # Image
    image: 
      tag: 21.1.2-debian-11-r1
  
    # Logging
    logging:
      level: INFO
  
    # Replica
    replicaCount: 1
  
    # Admin account
    auth:
      adminUser: fiwareAdmin
      adminPassword: fiwareAdmin
  
    # CLI config
    keycloakConfigCli:
      enabled: true
      # current image does not contain 20.0.3., thus we need this fix
      command: 
        - java
        - -jar
        - /opt/bitnami/keycloak-config-cli/keycloak-config-cli-20.0.1.jar
  
      extraEnvVars:
        - name: IMPORT_FILES_LOCATIONS
          value: "/config/*"
      containerSecurityContext:
        enabled: false
      podSecurityContext:
        enabled: false
  
      # Realm config - either provide configuration or existing ConfigMap
      configuration: {}
      existingConfigmap: ""
  
    # ENVs
    extraEnvVars:
    - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_LOG_LEVEL
      value: INFO
    - name: VCISSUER_ISSUER_DID
      value: "did:web:my-did:did"
    - name: VCISSUER_WALTID_ADDRESS
      value: "http://vcwaltid"
  
    # Volume mounts
    extraVolumeMounts:
      - name: profiles
        mountPath: /opt/bitnami/keycloak/conf/profile.properties
        subPath: profile.properties
      - name: providers
        mountPath: /opt/bitnami/keycloak/providers/
      - name: data
        mountPath: /data
  
    # Volumes
    extraVolumes:
      - name: data
        emptyDir: {}
      - name: profiles
        configMap:
          name: keycloak-profile
      - name: providers
        emptyDir: {}
      - name: did-config
        configMap:
          name: keycloak-did-config
      - name: did-secret
        secret: 
          secretName: vcwaltid-tls-sec
  
    # Init containers for VC issuer and loading of DID
    initContainers:
      - name: add-vc-issuer
        image: quay.io/fiware/keycloak-vc-issuer:1.0.1
        imagePullPolicy: Always
        volumeMounts:
          - name: providers
            mountPath: /target
      - name: load-did
        image: quay.io/opencloudio/curl:4.2.0-build.8
        imagePullPolicy: Always
        command: 
          - /bin/sh
          - /opt/did/script/import.sh
        env:
          - name: WALTID_CORE_ADDRESS
            value: "vcwaltid:7000"
        volumeMounts:
          - name: did-config
            mountPath: /opt/did/script
          - name: did-secret
            mountPath: /opt/did/secret
  
    # Disable internal DB
    postgresql:
      enabled: false
  
    # Config for external DB
    externalDatabase:
      host: postgresql
      user: keycloak
      password: "<keycloak-password>"
      database: keycloak
  
  # Config to create DID
  didConfig:
    # Enable creation of ConfigMap for loading the DID into walt-id
    # When disabling, also remove the load-did initContainer from the list above
    loadDidWebEnabled: true
  
    # Domain for DID web
    domain: "provider.com"
  
    # x5u for DID web
    x5u: "https://provider.com/certs/tls.crt"
  
  # OpenShift Route config
  route:
    enabled: false
    host: my-host.org
    tls: {}
    certificate: {}
 
keyrock:
  # Enable the deployment of application: keyrock
  deploymentEnabled: true
 
  keyrock:
    fullnameOverride: keyrock-dsc
  
    # Image
    statefulset:
      image:
        repository: quay.io/wi_stefan/keyrock
        tag: sn-fix-2
        pullPolicy: Always
  
    # DB config
    db:
      user: root
      password: "<mysql-password>"
      host: mysql-dsc
  
    # Admin user to be created
    admin:
      user: admin
      password: "<keyrock-password>"
      email: admin@fiware.org
  
    # External hostname of Keyrock
    host: https://keyrock.provider.com
    
    ## Theme configuration for Keyrock
    theme:
      ## -- Enable theme
      enabled: false
  
    ## Configuration of Authorisation Registry (AR)
    authorisationRegistry:
      # -- Enable usage of authorisation registry
      enabled: true
      # -- Identifier (EORI) of AR
      identifier: "did:web:my-did:did"
      # -- URL of AR
      url: "internal"
  
    ## Configuration of iSHARE Satellite
    satellite:
      # -- Enable usage of satellite
      enabled: true
      # -- Identifier (EORI) of satellite
      identifier: "EU.EORI.FIWARESATELLITE"
      # -- URL of satellite
      url: "https://tir.dataspace.com"
      # -- Token endpoint of satellite
      tokenEndpoint: "https://https://tir.dataspace.com/token"
      # -- Parties endpoint of satellite
      partiesEndpoint: "https://https://tir.dataspace.com/parties"
  
    ## -- Configuration of local key and certificate for validation and generation of tokens
    token:
      # -- Enable storage of local key and certificate
      enabled: false
  
    # ENV variables for Keyrock
    additionalEnvVars:
      - name: IDM_TITLE
        value: "dsba AR"
      - name: IDM_DEBUG
        value: "true"
      - name: DEBUG
        value: "*"
      - name: IDM_DB_NAME
        value: ar_idm
      - name: IDM_DB_SEED
        value: "true"
      - name: IDM_SERVER_MAX_HEADER_SIZE
        value: "32768"
      - name: IDM_PR_CLIENT_ID
        value: "did:web:my-did:did"
      - name: IDM_PR_CLIENT_KEY
        valueFrom:
            secretKeyRef:
              name: vcwaltid-tls-sec
              key: tls.key
      - name: IDM_PR_CLIENT_CRT
        valueFrom:
            secretKeyRef:
              name: vcwaltid-tls-sec
              key: tls.crt
 
kong:
  # Enable the deployment of application: kong
  deploymentEnabled: true
 
  kong:
    image:
      repository: quay.io/fiware/kong
      tag: "0.5.7"
      pullPolicy: IfNotPresent
  
    replicaCount: 1
  
    autoscaling:
      enabled: false
  
    env:
      database: "off"
      nginx_worker_processes: "2"
      proxy_access_log: /dev/stdout
      admin_access_log: /dev/stdout
      admin_gui_access_log: /dev/stdout
      portal_api_access_log: /dev/stdout
      proxy_error_log: /dev/stderr
      admin_error_log: /dev/stderr
      admin_gui_error_log: /dev/stderr
      portal_api_error_log: /dev/stderr
      prefix: /kong_prefix/
      log_level: debug
      nginx_proxy_large_client_header_buffers: "16 128k"
      nginx_proxy_http2_max_field_size: "32k"
      nginx_proxy_http2_max_header_size: "32k"
      plugins: bundled,pep-plugin,ngsi-ishare-policies
      pluginserver_names: pep-plugin
      pluginserver_pep_plugin_start_cmd: "/go-plugins/pep-plugin"
      pluginserver_pep_plugin_query_cmd: "/go-plugins/pep-plugin -dump"
  
    ingressController:
      enabled: false
      installCRDs: false
    
    proxy:
      type: ClusterIP
      enabled: true
      tls:
        enabled: false
        
      # Provide Ingress or Route config here
      ingress:
        enabled: false
      route:
        enabled: false
    
    admin:
      enabled: true
      type: ClusterIP  
      http: 
        enabled: true
        servicePort: 8001
        containerPort: 8001
  
    status:
      enabled: true
      http: 
        enabled: true
        containerPort: 9102
  
    # Provide the kong.yml configuration (either as existing CM, secret or directly in the values.yaml)
    dblessConfig:
      configMap: ""
      secret: ""
      config: |
        _format_version: "2.1"
        _transform: true
  
        consumers:
        - username: token-consumer
          keyauth_credentials:
          - tags: 
            - token-key
            - tir-key
  
        services:
          - host: "orion"
            name: "provider"
            port: 1026
            protocol: http
  
            routes:
              - name: my-path
                paths:
                  - /my-path
                strip_path: true
  
            plugins:
              - name: pep-plugin
                config:
                  pathprefix: "/pdc"
                  authorizationendpointtype: ExtAuthz
                  authorizationendpointaddress: http://pdp-dsba-pdp:8080/authz
  
              - name: request-transformer
                config:
                  remove:
                    headers:
                      - Authorization
                      - authorization
 
mongodb:
  # Enable the deployment of application: mongodb
  deploymentEnabled: true
 
  mongodb:
    
    auth:
      enabled: true
      rootPassword: "<mongodb-password>"
      
    architecture: standalone
    
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
  
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
  
    persistence:
      enabled: true
      size: 8Gi
 
mysql:
  # Enable the deployment of application: mysql
  deploymentEnabled: true
 
  mysql:
    fullnameOverride: mysql-dsc
    auth:
      # Should use a Secret on production deployments
      rootPassword: "<mysql-password>"
    initdbScripts:
      create.sql: |
        CREATE DATABASE til;
        CREATE DATABASE ccs;
 
wallet:
  deploymentEnabled: true
  wallet:
    ReplicaCount: 1
    FABRIC_ENDPOINT: "192.168.49.1"
    ISSUER_PORT: 30011
    VERIFIER_PORT: 30012
    WALLET_PORT: 30013

pep-pdp:
  deploymentEnabled: true
  pep-pdp:
    ReplicaCount: 1
    env:
    - name: PDP_PORT
      value: "8088"
    - name: PDP_CONFIG
      value: "test"
    - name: PDP_KS
      value: "/app/crypto/serverErat.ks"
    - name: PDP_PW
      value: "hola123"
    - name: PDP_ALIAS
      value: "MiAliasPriv"
    - name: DLT_IP
      value: "erat-server"
    - name: DLT_PORT
      value: "8086"
    - name: IDAGENT_KS
      value: "/app/crypto/ec-cakey.jks"
    - name: IDAGENT_PW
      value: "hola123"
    - name: IDAGENT_ALIAS
      value: "myserver"
    - name: IDAGENT_CERT
      value: "/app/crypto/ec-cacert.pem"
    - name: IDAGENT_IP
      value: "127.21.0.4"
    - name: IDAGENT_PORT
      value: "8082"
    - name: RESOURCES
      value: "/app/resources"
    - name: CT_EXPIRATION
      value: "2600000"

orion-ld:
  # Enable the deployment of application: orion-ld
  deploymentEnabled: true
 
  orion:
        
    broker:
      db:
        auth: 
          user: root
          password: "<mongodb-password>"
          mech: "SCRAM-SHA-1"
        hosts:
          - mongodb
  
    mongo:
      # we want to use the individually deployed mongodb
      enabled: false
 
postgres:
  # Enable the deployment of application: postgres
  deploymentEnabled: true
 
  postgresql:
    
    fullnameOverride: postgresql-dsc
    
    auth:
      # Credentials for Keycloak DB
      username: keycloak
      password: "<keycloak-password>"
      enablePostgresUser: true
  
      # Credentials for postgres admin user
      postgresPassword: "<admin-password>"
      
    # Init DB
    primary:
      initdb:
        scripts:
          create.sh: |
            psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE keycloak;"
 
tm-forum-api:
  # Enable the deployment of application: tm-forum-api
  deploymentEnabled: true
 
  tm-forum-api:
    ## configuration to be used by every api-deployment if nothing specific is provided.
    defaultConfig:
    
      # -- configuration to be used for the image of the container
      image:
        # -- repository to get the container from
        #repository: quay.io/fiware
        repository: quay.io/fiware
        # -- tag to be used, most of the time the apis will use the same version
        #tag: 0.8.1
        tag: 0.8.1
        # -- pull policy to be used
        pullPolicy: IfNotPresent
  
      # --  ngsi-ld broker connection information
      ngsiLd:
        # -- timeout for requests ot the broker
        readTimeout: 30s
        # -- base path for the ngsi-ld api
        path: ngsi-ld/v1
        # -- address of the broker
        url: http://orion:1026
  
    # enable the api proxy
    apiProxy:
      image:
        tag: distroless-v1.27-latest
      enabled: true
  
    # -- list of apis to be deployed
    # -- every api needs to define a name and image. Basepath is required when routes or ingress will be enabled. Beside that, they can overwrite the default-config by using the same keys.
    # -- be aware: when you change the image repositrory or the tag for an api, you have to provide both values for the changes to take effect
    apis:
      - name: party-catalog
        image: tmforum-party-catalog
        basePath: /tmf-api/party/v4
        
      - name: customer-bill-management
        image: tmforum-customer-bill-management
        basePath: /tmf-api/customerBillManagement/v4
        
      - name: customer-management
        image: tmforum-customer-management
        basePath: /tmf-api/customerManagement/v4
        
      - name: product-catalog
        image: tmforum-product-catalog
        basePath: /tmf-api/productCatalogManagement/v4
        
      - name: product-inventory
        image: tmforum-product-inventory
        basePath: /tmf-api/productInventory/v4
        
      - name: product-ordering-management
        image: tmforum-product-ordering-management
        basePath: /tmf-api/productOrderingManagement/v4
        
      - name: resource-catalog
        image: tmforum-resource-catalog
        basePath: /tmf-api/resourceCatalog/v4
        
      - name: resource-function-activation
        image: tmforum-resource-function-activation
        basePath: /tmf-api/resourceFunctionActivation/v4
        
      - name: resource-inventory
        image: tmforum-resource-inventory
        basePath: /tmf-api/resourceInventoryManagement/v4
        
      - name: service-catalog
        image: tmforum-service-catalog
        basePath: /tmf-api/serviceCatalogManagement/v4
  
    # redis caching
    redis:
      enabled: false
 
trusted-issuers-list:
  # Enable the deployment of application: trusted-issuers-list
  deploymentEnabled: true
 
  trusted-issuers-list:
  
    # Image
    deployment:
      image:  
        tag: 0.0.3
  
    # Configure an Ingress or OpenShift Route
    ingress:
      til:
        enabled: false
      tir:
        enabled: false
    route:
      til:
        enabled: false
      tir:
        enabled: false
        
    # Database config
    database:
      persistence: true
      host: mysql-dsc
      name: til
  
      # Should use Secret in production environment
      username: root
      password: "<mysql-password>"
 
vcwaltid:
  # Enable the deployment of application: vcwaltid
  deploymentEnabled: true
 
  # Organisation DID
  did: did:web:my-did:did
  
  # Networking
  route:
    enabled: false
  ingress:
    enabled: false
    class: nginx
  
  # Walt-id config
  vcwaltid:
  
    # Image
    deployment:
      image:
        repository: quay.io/fiware/waltid
        tag: 1.14.1-SNAPSHOT
        pullPolicy: Always
  
    # API config
    api:
      core: 
        enabled: true
      auditor: 
        enabled: true
      signatory: 
        enabled: true
      custodian: 
        enabled: true
      essif: 
        enabled: true
  
    # Persistence
    persistence: 
      enabled: true
      pvc:
        size: 1Gi
  
    # List of templates to be created
    templates:
      GaiaXParticipantCredential.json: |
        {
          "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://registry.lab.dsba.eu/development/api/trusted-shape-registry/v1/shapes/jsonld/trustframework#"
          ],
          "type": [
            "VerifiableCredential"
          ],
          "id": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
          "issuer": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
          "issuanceDate": "2023-03-21T12:00:00.148Z",
          "credentialSubject": {
            "id": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
            "type": "gx:LegalParticipant",
            "gx:legalName": "dsba compliant participant",
            "gx:legalRegistrationNumber": {
              "gx:vatID": "MYVATID"
            },
            "gx:headquarterAddress": {
              "gx:countrySubdivisionCode": "BE-BRU"
            },
            "gx:legalAddress": {
              "gx:countrySubdivisionCode": "BE-BRU"
            },
            "gx-terms-and-conditions:gaiaxTermsAndConditions": "70c1d713215f95191a11d38fe2341faed27d19e083917bc8732ca4fea4976700"
          }
        }
 
verifier:
  # Enable the deployment of application: verifier
  deploymentEnabled: true
 
  vcverifier:
    
    deployment:
  
      # Image
      image:
        repository: quay.io/fiware/vcverifier
        tag: 4.0.1
        pullPolicy: Always
  
      # Logging
      logging: 
        level: DEBUG
        pathsToSkip: 
          - "/health"
  
      # Server config
      #server:
      #  # Place external host here when publishing verifier with public URL
      #  host: https://verifier.my-url.com
  
      # Walt-id config
      ssikit:
        auditorUrl: http://vcwaltid:7003
  
      # Verifier config
      verifier:
        # URL endpoint of data space trusted issuers registry
        tirAddress: https://tir.dataspace.com/v3/issuers
        # DID of organisation
        did: did:web:my-did:did
  
      # M2M config
      m2m:
        authEnabled: false
  
      # Config service
      configRepo:
        configEndpoint: http://ccs-credentials-config-service:8080/
